{%- from tplroot ~ "/map.jinja" import kubernetes with context -%}
{%- set component = 'kube-apiserver' -%}
{%- set component_bin_path = kubernetes.install_dir + '/apiserver' -%}
{%- from tplroot ~ "/vars.jinja" import
    k8s,
    apiserver_port,
    kubernetes_networks, kubernetes_runtime_config, kubernetes_feature_gates,
    kubernetes_admission_controllers,
    kubernetes_etc_dir, kubernetes_ssl_dir,
    kubernetes_ca_cert_path, kubernetes_ca_key_path,
    kubernetes_sa_key_path, kubernetes_sa_pub_path,
    kubelet_client_ssl_cert_path, kubelet_client_ssl_key_path,
    front_proxy_ca_cert_path, front_proxy_client_ssl_cert_path, front_proxy_client_ssl_key_path,
    component_ssl_cert_path, component_ssl_key_path
with context -%}
{%- from "etcd/vars.jinja" import
    etcd_endpoints,
    etcd_ca_cert_path,
    etcd_ssl_cert_path, etcd_ssl_key_path
-%}
{%- from "common/vars.jinja" import
    node_ip4
-%}

[Unit]
Description=Kubernetes API Server
Documentation=https://github.com/kubernetes/kubernetes
After=network.target etcd.service flannel.service

[Service]
User=root
ExecStart={{ component_bin_path }} \
    --bind-address=0.0.0.0 \
    --secure-port={{ apiserver_port }} \
    --advertise-address={{ node_ip4 }} \
{%- if 'allow_privileged' in k8s.security %}
    --allow-privileged=true \
{%- endif %}
    --apiserver-count={{ etcd_endpoints|length }} \
    --authorization-mode={% for mode in k8s.authorization_mode -%}
        {{ mode }}{% if not loop.last %},{% endif %}
{%- endfor %} \
{%- if k8s.authentication_token_webhook.enabled %}
    --authentication-token-webhook-config-file={{ kubernetes_etc_dir }}/webhook.conf \
  {%- if k8s.authentication_token_webhook.flags|length > 0 %}
    {%- for flag in k8s.authentication_token_webhook.flags %}
    {{ flag }} \
    {%- endfor %}
  {%- endif %}
{%- endif %}
    --service-account-{% if salt['pkg.version_cmp'](kubernetes.source_version, 'v1.20.0') >= 0 %}signing-{% endif %}key-file={{ kubernetes_sa_key_path }} \
{%- if salt['pkg.version_cmp'](kubernetes.source_version, 'v1.20.0') >= 0 %}
    --service-account-key-file={{ kubernetes_sa_pub_path }} \
    --service-account-issuer=https://{{ node_ip4 }}:6443 \
{%- endif %}
    --service-account-lookup=true \
{%- if kubernetes_feature_gates|length > 0 %}
    --feature-gates={% for feature in kubernetes_feature_gates -%}
        {{ feature }}{% if not loop.last %},{% endif %}
{%- endfor %} \
{%- endif %}
    --enable-admission-plugins=
{%- if 'Node' in k8s.authorization_mode -%}NodeRestriction,{%- endif -%}NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
{%- if kubernetes_admission_controllers|length > 0 %}
  {%- for controller in kubernetes_admission_controllers -%}
  ,{{ controller }}
  {%- endfor %}
{%- endif %} \
    --etcd-servers={{ etcd_endpoints|join(',') }} \
    --etcd-cafile={{ etcd_ca_cert_path }} \
    --etcd-certfile={{ etcd_ssl_cert_path }} \
    --etcd-keyfile={{ etcd_ssl_key_path }} \
{%- if kubernetes_runtime_config|length > 0 %}
    --runtime-config={% for resource in kubernetes_runtime_config -%}
        {{ resource }}{% if not loop.last %},{% endif %}
{%- endfor %} \
{%- endif %}
    --service-cluster-ip-range={{ kubernetes_networks.svc_network_cidr }} \
    --tls-cert-file={{ component_ssl_cert_path }} \
    --tls-private-key-file={{ component_ssl_key_path }} \
    --client-ca-file={{ kubernetes_ca_cert_path }} \
    --kubelet-client-certificate={{ kubelet_client_ssl_cert_path }} \
    --kubelet-client-key={{ kubelet_client_ssl_key_path }} \
    --requestheader-client-ca-file={{ front_proxy_ca_cert_path }} \
    --proxy-client-cert-file={{ front_proxy_client_ssl_cert_path }} \
    --proxy-client-key-file={{ front_proxy_client_ssl_key_path }} \
    --requestheader-allowed-names=front-proxy-client \
    --requestheader-extra-headers-prefix=X-Remote-Extra- \
    --requestheader-group-headers=X-Remote-Group \
    --requestheader-username-headers=X-Remote-User \
{%- if k8s.log_debug %}
  {%- if k8s.apiserver.log_debug_rbac %}
    --vmodule=rbac*=5 \
  {%- endif %}
    --v=4
{%- else %}
    --v=2
{%- endif %}{% if salt['pkg.version_cmp'](kubernetes.source_version, 'v1.26.0') < 0 %} \
    --logtostderr=true
{%- endif %}
Restart=on-failure
Type=notify
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target

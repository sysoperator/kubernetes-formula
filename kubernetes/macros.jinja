{%- set tplroot = tpldir.split('/')[0] -%}
{%- from tplroot ~ "/map.jinja" import kubernetes with context -%}
{%- from tplroot ~ "/vars.jinja" import
    k8s,
    node_role
with context -%}
{%- from "debian/packages/macros.jinja" import
    Python3_M2Crypto
-%}
{%- from "common/vars.jinja" import
    nobody_groupname
-%}

{%- set watch_in_modules = [] -%}
{%- if node_role == 'master' -%}
	{%- set _ = watch_in_modules.append('kube-apiserver.service-restart') -%}
{%- endif -%}
{%- if k8s.single_node_cluster != true %}
	{%- set _ = watch_in_modules.append('flannel.service-restart') -%}
{%- endif -%}

{%- macro kubecomponentbinary(component, component_source, component_source_hash, component_bin_path, package_flavor='server', is_service=True) -%}
{{ component }}:
  file.managed:
    - name: {{ component_bin_path }}
    - mode: 755
    - user: root
    - source: {{ component_source }}
    - source_hash: {{ component_source_hash }}
    - follow_symlinks: False
  {%- if salt['file.file_exists'](component_bin_path) %}
    - onchanges:
  {%- else %}
    - require:
  {%- endif %}
      - archive: kubernetes-{{ package_flavor }}-download
  {%- if is_service %}
    - require_in:
      - file: {{ component }}.service
  {%- endif %}
{%- endmacro -%}

{%- macro kubepackagedownload(package_dir, package_source, package_source_hash, package_flavor='server') -%}
kubernetes-{{ package_flavor }}-download:
  archive.extracted:
    - name: {{ package_dir }}
    - source: {{ package_source }}
    - source_hash: {{ package_source_hash }}
    - archive_format: tar
    - options: v --strip=2
    - user: nobody
    - group: {{ nobody_groupname }}
    - keep: True
    - enforce_toplevel: False
    - if_missing: {{ package_dir }}
    - require:
      - pkg: ca-certificates
{% endmacro -%}

{%- macro kubepkicertvalid(name, cert_path, days_remaining=30) -%}
{{ name }}.crt-valid:
  tls.valid_certificate:
    - name: {{ cert_path }}
    - days: {{ days_remaining }}
    - require:
      - pkg: python3-openssl
    - onlyif:
      - test -f {{ cert_path }}
{%- endmacro -%}

{%- macro kubepkicert(name, cert_path, key_path, ca_path, ca_key_path, key_usage='clientAuth', days_valid=365, days_remaining=30, subject_CN=None, subject_O=None, subject_SAN=None) -%}
{{ name }}.crt:
  x509.certificate_managed:
    - name: {{ cert_path }}
    - mode: 644
    - user: root
    - signing_cert: {{ ca_path }}
    - signing_private_key: {{ ca_key_path }}
    - private_key: {{ key_path }}
    - CN: {{ subject_CN }}
  {%- if subject_O %}
    - O: {{ subject_O }}
  {%- endif %}
  {%- if subject_SAN %}
    - subjectAltName: {{ subject_SAN }}
  {%- endif %}
    - basicConstraints: "CA:FALSE"
    - keyUsage: "nonRepudiation, digitalSignature, keyEncipherment"
    - extendedKeyUsage: "{{ key_usage }}"
    - days_valid: {{ days_valid }}
    - days_remaining: {{ days_remaining }}
    - backup: True
    - require:
{{ Python3_M2Crypto() }}
  {%- if salt['file.file_exists'](cert_path) %}
    - onfail:
      - tls: {{ name }}.crt-valid
  {%- endif %}
  {%- if name == 'etcd' %}
    {%- if watch_in_modules|length > 0 %}
    - watch_in:
      {% for module in watch_in_modules -%}
	  - module: {{ module }}
      {% endfor -%}
	{%- endif %}
  {%- endif %}
{%- endmacro -%}

{%- macro kubepkikey(name, key_path, key_owner=None) -%}
{{ name }}.key:
  x509.private_key_managed:
    - name: {{ key_path }}
    - keysize: 2048
    - mode: 600
  {%- if key_owner %}
    - user: {{ key_owner }}
  {%- endif %}
    - require:
{{ Python3_M2Crypto() }}
  {%- if key_owner %}
      - user: {{ key_owner }}-user
  {%- endif %}
    - require_in:
      - x509: {{ name }}.crt
{%- endmacro -%}

{%- macro generatesanfrompeers(peers) -%}
  {%- for peer in peers -%}
    IP:{{ peer['ip'] }}{% if not loop.last %}, {% endif %}
  {%- endfor %}
{%- endmacro -%}

{%- macro kubeconfig(user, apiserver, ca_cert_path, client_cert_path, client_key_path) -%}
apiVersion: v1
kind: Config
clusters:
- cluster:
    server: {{ apiserver }}
    certificate-authority: {{ ca_cert_path }}
  name: local
contexts:
- context:
    cluster: local
    user: {{ user }}
  name: local
current-context: local
users:
  - name: {{ user }}
    user:
      client-certificate: {{ client_cert_path }}
      client-key: {{ client_key_path }}
{%- endmacro -%}

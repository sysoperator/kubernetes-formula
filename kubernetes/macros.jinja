{%- set tplroot = tpldir.split('/')[0] -%}
{%- from tplroot ~ "/map.jinja" import kubernetes with context -%}
{%- from tplroot ~ "/vars.jinja" import
    k8s,
    node_role
with context -%}
{%- from "common/vars.jinja" import
    nobody_groupname
-%}

{%- macro kubecomponentbinary(component, component_source, component_source_hash, component_bin_path, package_flavor='server', is_service=True) -%}
{{ component }}:
  file.managed:
    - name: {{ component_bin_path }}
    - mode: 755
    - user: root
    - source: {{ component_source }}
    - source_hash: {{ component_source_hash }}
    - follow_symlinks: False
  {%- if salt['file.file_exists'](component_bin_path) %}
    - onchanges:
  {%- else %}
    - require:
  {%- endif %}
      - archive: kubernetes-{{ package_flavor }}-download
  {%- if is_service %}
    - require_in:
      - file: {{ component }}.service
  {%- endif %}
{%- endmacro -%}

{%- macro kubepackagedownload(package_dir, package_source, package_source_hash, package_flavor='server') -%}
kubernetes-{{ package_flavor }}-download:
  archive.extracted:
    - name: {{ package_dir }}
    - source: {{ package_source }}
    - source_hash: {{ package_source_hash }}
    - archive_format: tar
    - options: v --strip=2
    - user: nobody
    - group: {{ nobody_groupname }}
    - keep: True
    - enforce_toplevel: False
    - if_missing: {{ package_dir }}
    - require:
      - pkg: ca-certificates
{% endmacro -%}

{%- macro kubeconfig(user, apiserver, ca_cert_path, client_cert_path, client_key_path) -%}
apiVersion: v1
kind: Config
clusters:
- cluster:
    server: {{ apiserver }}
    certificate-authority: {{ ca_cert_path }}
  name: local
contexts:
- context:
    cluster: local
    user: {{ user }}
  name: local
current-context: local
users:
  - name: {{ user }}
    user:
      client-certificate: {{ client_cert_path }}
      client-key: {{ client_key_path }}
{%- endmacro -%}
